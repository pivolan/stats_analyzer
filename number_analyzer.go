// number_analyzer.go
package main

import (
	"fmt"
	"math"
	"regexp"
	"sort"
	"strconv"
	"strings"
)

type NumberStats struct {
	Average   float64
	Median    float64
	Min       float64
	Max       float64
	Count     int
	Quantiles map[float64]float64 // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–≤–∞–Ω—Ç–∏–ª–µ–π
	IQR       float64             // –ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö
	Outliers  []float64           // –í—ã–±—Ä–æ—Å—ã
}

// ExtractNumbers –∏–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
func ExtractNumbers(text string) []float64 {
	// –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
	text = strings.ReplaceAll(text, ",", " ")
	text = strings.ReplaceAll(text, "\n", " ")

	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª (–≤–∫–ª—é—á–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ)
	re := regexp.MustCompile(`-?\d*\.?\d+`)
	matches := re.FindAllString(text, -1)

	numbers := make([]float64, 0, len(matches))
	for _, match := range matches {
		if num, err := strconv.ParseFloat(match, 64); err == nil {
			numbers = append(numbers, num)
		}
	}
	return numbers
}

// calculateQuantile –≤—ã—á–∏—Å–ª—è–µ—Ç –∫–≤–∞–Ω—Ç–∏–ª—å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
func calculateQuantile(sorted []float64, p float64) float64 {
	if len(sorted) == 0 {
		return 0
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–≤–∞–Ω—Ç–∏–ª—è
	pos := p * float64(len(sorted)-1)
	floor := math.Floor(pos)
	ceil := math.Ceil(pos)

	if floor == ceil {
		return sorted[int(pos)]
	}

	// –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –±–ª–∏–∂–∞–π—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
	lower := sorted[int(floor)]
	upper := sorted[int(ceil)]
	fraction := pos - floor

	return lower + fraction*(upper-lower)
}

// findOutliers –Ω–∞—Ö–æ–¥–∏—Ç –≤—ã–±—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–∞—Ö–∞
func findOutliers(numbers []float64, q1 float64, q3 float64, iqr float64) []float64 {
	outliers := make([]float64, 0)
	lowerBound := q1 - 1.5*iqr
	upperBound := q3 + 1.5*iqr

	for _, num := range numbers {
		if num < lowerBound || num > upperBound {
			outliers = append(outliers, num)
		}
	}
	return outliers
}

// AnalyzeNumbers –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª
func AnalyzeNumbers(numbers []float64) *NumberStats {
	if len(numbers) == 0 {
		return nil
	}

	// –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	sorted := make([]float64, len(numbers))
	copy(sorted, numbers)
	sort.Float64s(sorted)

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
	sum := 0.0
	for _, num := range numbers {
		sum += num
	}
	avg := sum / float64(len(numbers))

	// –í—ã—á–∏—Å–ª—è–µ–º –º–µ–¥–∏–∞–Ω—É
	var median float64
	if len(sorted)%2 == 0 {
		median = (sorted[len(sorted)/2-1] + sorted[len(sorted)/2]) / 2
	} else {
		median = sorted[len(sorted)/2]
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –∫–≤–∞–Ω—Ç–∏–ª–∏
	quantiles := make(map[float64]float64)
	quantileList := []float64{0.01, 0.025, 0.1, 0.25, 0.75, 0.9, 0.975, 0.99} // 1%, 2.5%, 10%, 25%, 75%, 90%, 97.5%, 99% –∫–≤–∞–Ω—Ç–∏–ª–∏

	for _, p := range quantileList {
		quantiles[p] = roundToTwo(calculateQuantile(sorted, p))
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR)
	iqr := quantiles[0.75] - quantiles[0.25]

	// –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–æ—Å—ã
	outliers := findOutliers(numbers, quantiles[0.25], quantiles[0.75], iqr)

	return &NumberStats{
		Average:   roundToTwo(avg),
		Median:    roundToTwo(median),
		Min:       roundToTwo(sorted[0]),
		Max:       roundToTwo(sorted[len(sorted)-1]),
		Count:     len(numbers),
		Quantiles: quantiles,
		IQR:       roundToTwo(iqr),
		Outliers:  outliers,
	}
}

// FormatStats —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram
func FormatStats(stats *NumberStats) string {
	if stats == nil {
		return "‚ùå –ß–∏—Å–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"
	}

	outlierStr := ""
	if len(stats.Outliers) > 0 {
		outlierStr = fmt.Sprintf("\n–í—ã–±—Ä–æ—Å—ã: %.2f", stats.Outliers)
	}

	return fmt.Sprintf(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∏—Å–µ–ª:

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d
–°—Ä–µ–¥–Ω–µ–µ: %.2f
–ú–µ–¥–∏–∞–Ω–∞: %.2f
–ú–∏–Ω–∏–º—É–º: %.2f
–ú–∞–∫—Å–∏–º—É–º: %.2f

–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∫–≤–∞–Ω—Ç–∏–ª–∏:
1-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: %.2f
2.5-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: %.2f
97.5-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: %.2f
99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: %.2f

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–≤–∞–Ω—Ç–∏–ª–∏:
10-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: %.2f
25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å (Q1): %.2f
75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å (Q3): %.2f
90-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: %.2f

–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR): %.2f%s`,
		stats.Count,
		stats.Average,
		stats.Median,
		stats.Min,
		stats.Max,
		stats.Quantiles[0.01],
		stats.Quantiles[0.025],
		stats.Quantiles[0.975],
		stats.Quantiles[0.99],
		stats.Quantiles[0.1],
		stats.Quantiles[0.25],
		stats.Quantiles[0.75],
		stats.Quantiles[0.9],
		stats.IQR,
		outlierStr)
}

// roundToTwo –æ–∫—Ä—É–≥–ª—è–µ—Ç —á–∏—Å–ª–æ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
func roundToTwo(num float64) float64 {
	return math.Round(num*100) / 100
}
