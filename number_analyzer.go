// number_analyzer.go
package main

import (
	"fmt"
	"math"
	"regexp"
	"sort"
	"strconv"
	"strings"
)

type NumberStats struct {
	Average float64
	Median  float64
	Min     float64
	Max     float64
	Count   int
}

// ExtractNumbers –∏–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
func ExtractNumbers(text string) []float64 {
	// –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
	text = strings.ReplaceAll(text, ",", " ")
	text = strings.ReplaceAll(text, "\n", " ")

	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª (–≤–∫–ª—é—á–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ)
	re := regexp.MustCompile(`-?\d*\.?\d+`)
	matches := re.FindAllString(text, -1)

	numbers := make([]float64, 0, len(matches))
	for _, match := range matches {
		if num, err := strconv.ParseFloat(match, 64); err == nil {
			numbers = append(numbers, num)
		}
	}
	return numbers
}

// AnalyzeNumbers –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª
func AnalyzeNumbers(numbers []float64) *NumberStats {
	if len(numbers) == 0 {
		return nil
	}

	// –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–¥–ª—è –º–µ–¥–∏–∞–Ω—ã)
	sorted := make([]float64, len(numbers))
	copy(sorted, numbers)
	sort.Float64s(sorted)

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
	sum := 0.0
	for _, num := range numbers {
		sum += num
	}
	avg := sum / float64(len(numbers))

	// –í—ã—á–∏—Å–ª—è–µ–º –º–µ–¥–∏–∞–Ω—É
	var median float64
	if len(sorted)%2 == 0 {
		median = (sorted[len(sorted)/2-1] + sorted[len(sorted)/2]) / 2
	} else {
		median = sorted[len(sorted)/2]
	}

	return &NumberStats{
		Average: roundToTwo(avg),
		Median:  roundToTwo(median),
		Min:     roundToTwo(sorted[0]),
		Max:     roundToTwo(sorted[len(sorted)-1]),
		Count:   len(numbers),
	}
}

// FormatStats —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram
func FormatStats(stats *NumberStats) string {
	if stats == nil {
		return "‚ùå –ß–∏—Å–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"
	}

	return fmt.Sprintf(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∏—Å–µ–ª:

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d
–°—Ä–µ–¥–Ω–µ–µ: %.2f
–ú–µ–¥–∏–∞–Ω–∞: %.2f
–ú–∏–Ω–∏–º—É–º: %.2f
–ú–∞–∫—Å–∏–º—É–º: %.2f`,
		stats.Count,
		stats.Average,
		stats.Median,
		stats.Min,
		stats.Max)
}

// roundToTwo –æ–∫—Ä—É–≥–ª—è–µ—Ç
func roundToTwo(num float64) float64 {
	return math.Round(num*100) / 100
}
