package main

import (
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api"
	uuid "github.com/satori/go.uuid"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"
)

var toDelete = map[string]time.Time{}

// telegram_handler.go

func handleText(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	message := update.Message
	text := message.Text

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∏—Å–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
	numbers := ExtractNumbers(text)
	if len(numbers) > 0 {
		// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∏—Å–ª–∞
		stats := AnalyzeNumbers(numbers)
		formattedStats := FormatStats(stats)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		msg := tgbotapi.NewMessage(message.Chat.ID, formattedStats)
		_, err := bot.Send(msg)
		if err != nil {
			return
		}
		return
	}

	// –ï—Å–ª–∏ —á–∏—Å–µ–ª –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
	welcomeText := `–ü—Ä–∏–≤–µ—Ç! üëã

–Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã. 

–ß—Ç–æ —è —É–º–µ—é:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é CSV —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Å–µ–ª (–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–∞ –≤ —á–∞—Ç)
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∞—Ä—Ö–∏–≤—ã (gzip, lz4, zip)
- –°–æ–∑–¥–∞—é –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º
- –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –°—Ç—Ä–æ—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏

–ö–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª –ø—Ä—è–º–æ –≤ —á–∞—Ç
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
3. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–∑–∞–≥—Ä—É–∑–∫—É

–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∏—Å–µ–ª:
- "1 2 3 4 5"
- "1,2,3,4,5"
- "1\n2\n3\n4\n5"
`

	switch message.Command() {
	case "start":
		msg := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
		_, err := bot.Send(msg)
		if err != nil {
			return
		}
		return
	}

	uid := uuid.NewV4()
	users[uid.String()] = message.Chat.ID
	msg := tgbotapi.NewMessage(message.Chat.ID, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: https://statsdata.org/?id="+uid.String())
	toDelete[uid.String()] = time.Now()
	_, err := bot.Send(msg)
	if err != nil {
		return
	}
}

func handleDocument(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	// Save document to disk
	fileURL, err := bot.GetFileDirectURL(message.Document.FileID)
	if err != nil {
		log.Printf("Error getting file URL: %v", err)
		uid := uuid.NewV4()
		users[uid.String()] = message.Chat.ID
		msg := tgbotapi.NewMessage(message.Chat.ID, "Error on upload file, if file too big try another method, upload by this link: https://statsdata.org/?id="+uid.String())
		bot.Send(msg)
		return
	}

	// Download file to disk
	filePath := filepath.Join(".", strconv.Itoa(message.From.ID), message.Document.FileName)
	err = os.MkdirAll(filepath.Dir(filePath), os.ModePerm)
	if err != nil {
		log.Printf("Error creating directory: %v", err)
		return
	}
	resp, err := http.Get(fileURL)
	if err != nil {
		log.Printf("Error downloading file: %v", err)
		return
	}
	defer resp.Body.Close()
	file, err := os.Create(filePath)
	if err != nil {
		log.Printf("Error creating file: %v", err)
		return
	}
	_, err = io.Copy(file, resp.Body)
	if err != nil {
		log.Printf("Error writing file: %v", err)
		return
	}

	// Unpack archive if necessary
	go func() {
		stat := handleFile(filePath)
		sendStats(message.Chat.ID, stat, bot)
		//files with dates
	}()
}

func sendStats(chatId int64, stat map[string]CommonStat, bot *tgbotapi.BotAPI) {
	formattedText := GenerateTable(stat)
	formattedTexts := GenerateGroupsTables(stat)
	csvFiles := GenerateCSVByDates(stat)

	msg := tgbotapi.NewMessage(chatId, "<pre>\n"+formattedText+"\n</pre>")
	msg.ParseMode = tgbotapi.ModeHTML
	bot.Send(msg)
	//files with common infos
	data := tgbotapi.FileBytes{Name: "stats" + time.Now().Format("20060102-150405") + ".txt", Bytes: []byte(formattedText)}
	msg2 := tgbotapi.NewDocumentUpload(chatId, data)
	msg2.Caption = "file"
	bot.Send(msg2)
	data = tgbotapi.FileBytes{Name: "stats_groups" + time.Now().Format("20060102-150405") + ".txt", Bytes: []byte(strings.Join(formattedTexts, "\n"))}
	msg2 = tgbotapi.NewDocumentUpload(chatId, data)
	msg2.Caption = "file"
	bot.Send(msg2)
	if len(csvFiles) > 2 {
		b := ZipArchive(csvFiles)
		data = tgbotapi.FileBytes{Name: "stats_dates" + time.Now().Format("20060102-150405") + ".zip", Bytes: b}
		msg2 = tgbotapi.NewDocumentUpload(chatId, data)
		msg2.Caption = "use https://www.csvplot.com/ for great presentation of this data, use datetime column for date axis, common column for legend, and cnt as main count"
		bot.Send(msg2)
	} else {
		for _, csvData := range csvFiles {
			data = tgbotapi.FileBytes{Name: "stats_dates" + time.Now().Format("20060102-150405") + ".csv", Bytes: []byte(csvData)}
			msg2 = tgbotapi.NewDocumentUpload(chatId, data)
			msg2.Caption = "file"
			bot.Send(msg2)
		}
	}
}

func handleFile(filePath string) map[string]CommonStat {
	// Unpack archive if necessary
	unpackedFilePath, err := unpackArchive(filePath)
	if err != nil {
		log.Printf("Error unpacking file: %v", err)
		return nil
	}
	if unpackedFilePath != "" {
		filePath = unpackedFilePath
	}

	// Import data into ClickHouse
	tableName, err := importDataIntoClickHouse(filePath)
	if err != nil {
		log.Printf("Error importing data into ClickHouse: %v", err)
		return nil
	}
	fmt.Print(tableName)
	return analyzeStatistics(tableName)
}
